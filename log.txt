------ MEMORY MANAGEMENT TEST 0 ------------------------------------
./mem input/proc/m0

------------------- in alloc_mem() --------------------
[alloc_mem] size = 13535, num_pages = 14
[alloc_mem] index in _mem_stat[] = [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13  ]
[alloc_mem] ret_mem = 00400 
[alloc_mem] update proc->bp = 03c00 
////////////-processing-page-//////////
[alloc_mem] Processing page 1th...
[alloc_mem] _mem_stat[index[0] = 0].proc = proc->pid
[alloc_mem] _mem_stat[index[0] = 0].index = ?
[alloc_mem] _mem_stat[index[0] = 0].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 1th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 00000 = 00400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00001
[alloc_mem] seg_table_t *pages = {
---> size = 0 (num of page_tables)
---> 
}
---> if page_table of seg_table = NULL
	 seg_table: pages->table[1].v_index = first_lv = 00000
	 seg_table: pages->table[1].pages = trans
	 increase seg_table size
	 page_table of seg_table: trans->table[0].v_index = second_lv = 00001
	 page_table of seg_table: trans->table[0].p_index = index[i] = 00000
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 2th...
[alloc_mem] _mem_stat[index[1] = 1].proc = proc->pid
[alloc_mem] _mem_stat[index[1] = 1].index = ?
[alloc_mem] _mem_stat[index[1] = 1].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 2th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 00400 = 00800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00002
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 1
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
}
	 page_table of seg_table: trans->table[1].v_index = second_lv = 00002
	 page_table of seg_table: trans->table[1].p_index = index[i] = 00001
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 3th...
[alloc_mem] _mem_stat[index[2] = 2].proc = proc->pid
[alloc_mem] _mem_stat[index[2] = 2].index = ?
[alloc_mem] _mem_stat[index[2] = 2].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 3th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 00800 = 00c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00003
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 2
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 2
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
}
	 page_table of seg_table: trans->table[2].v_index = second_lv = 00003
	 page_table of seg_table: trans->table[2].p_index = index[i] = 00002
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 4th...
[alloc_mem] _mem_stat[index[3] = 3].proc = proc->pid
[alloc_mem] _mem_stat[index[3] = 3].index = ?
[alloc_mem] _mem_stat[index[3] = 3].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 4th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 00c00 = 01000
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00004
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
}
	 page_table of seg_table: trans->table[3].v_index = second_lv = 00004
	 page_table of seg_table: trans->table[3].p_index = index[i] = 00003
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 5th...
[alloc_mem] _mem_stat[index[4] = 4].proc = proc->pid
[alloc_mem] _mem_stat[index[4] = 4].index = ?
[alloc_mem] _mem_stat[index[4] = 4].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 5th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 01000 = 01400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00005
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
}
	 page_table of seg_table: trans->table[4].v_index = second_lv = 00005
	 page_table of seg_table: trans->table[4].p_index = index[i] = 00004
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 6th...
[alloc_mem] _mem_stat[index[5] = 5].proc = proc->pid
[alloc_mem] _mem_stat[index[5] = 5].index = ?
[alloc_mem] _mem_stat[index[5] = 5].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 6th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 01400 = 01800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00006
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
}
	 page_table of seg_table: trans->table[5].v_index = second_lv = 00006
	 page_table of seg_table: trans->table[5].p_index = index[i] = 00005
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 7th...
[alloc_mem] _mem_stat[index[6] = 6].proc = proc->pid
[alloc_mem] _mem_stat[index[6] = 6].index = ?
[alloc_mem] _mem_stat[index[6] = 6].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 7th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 01800 = 01c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00007
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
}
	 page_table of seg_table: trans->table[6].v_index = second_lv = 00007
	 page_table of seg_table: trans->table[6].p_index = index[i] = 00006
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 8th...
[alloc_mem] _mem_stat[index[7] = 7].proc = proc->pid
[alloc_mem] _mem_stat[index[7] = 7].index = ?
[alloc_mem] _mem_stat[index[7] = 7].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 8th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 01c00 = 02000
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00008
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
}
	 page_table of seg_table: trans->table[7].v_index = second_lv = 00008
	 page_table of seg_table: trans->table[7].p_index = index[i] = 00007
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 9th...
[alloc_mem] _mem_stat[index[8] = 8].proc = proc->pid
[alloc_mem] _mem_stat[index[8] = 8].index = ?
[alloc_mem] _mem_stat[index[8] = 8].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 9th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 02000 = 02400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00009
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
}
	 page_table of seg_table: trans->table[8].v_index = second_lv = 00009
	 page_table of seg_table: trans->table[8].p_index = index[i] = 00008
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 10th...
[alloc_mem] _mem_stat[index[9] = 9].proc = proc->pid
[alloc_mem] _mem_stat[index[9] = 9].index = ?
[alloc_mem] _mem_stat[index[9] = 9].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 10th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 02400 = 02800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000a
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
}
	 page_table of seg_table: trans->table[9].v_index = second_lv = 0000a
	 page_table of seg_table: trans->table[9].p_index = index[i] = 00009
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 11th...
[alloc_mem] _mem_stat[index[10] = 10].proc = proc->pid
[alloc_mem] _mem_stat[index[10] = 10].index = ?
[alloc_mem] _mem_stat[index[10] = 10].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 11th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 02800 = 02c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000b
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
}
	 page_table of seg_table: trans->table[10].v_index = second_lv = 0000b
	 page_table of seg_table: trans->table[10].p_index = index[i] = 0000a
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 12th...
[alloc_mem] _mem_stat[index[11] = 11].proc = proc->pid
[alloc_mem] _mem_stat[index[11] = 11].index = ?
[alloc_mem] _mem_stat[index[11] = 11].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 12th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 02c00 = 03000
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000c
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[10].v_index = 00001
		 page_table of seg_table-0: table[10].p_index = 00000
}
	 page_table of seg_table: trans->table[11].v_index = second_lv = 0000c
	 page_table of seg_table: trans->table[11].p_index = index[i] = 0000b
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 13th...
[alloc_mem] _mem_stat[index[12] = 12].proc = proc->pid
[alloc_mem] _mem_stat[index[12] = 12].index = ?
[alloc_mem] _mem_stat[index[12] = 12].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 13th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 03000 = 03400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000d
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[10].v_index = 00001
		 page_table of seg_table-0: table[10].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[11].v_index = 00001
		 page_table of seg_table-0: table[11].p_index = 00000
}
	 page_table of seg_table: trans->table[12].v_index = second_lv = 0000d
	 page_table of seg_table: trans->table[12].p_index = index[i] = 0000c
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 14th...
[alloc_mem] _mem_stat[index[13] = 13].proc = proc->pid
[alloc_mem] _mem_stat[index[13] = 13].index = ?
[alloc_mem] _mem_stat[index[13] = 13].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 14th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 03400 = 03800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000e
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[10].v_index = 00001
		 page_table of seg_table-0: table[10].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[11].v_index = 00001
		 page_table of seg_table-0: table[11].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[12].v_index = 00001
		 page_table of seg_table-0: table[12].p_index = 00000
}
	 page_table of seg_table: trans->table[13].v_index = second_lv = 0000e
	 page_table of seg_table: trans->table[13].p_index = index[i] = 0000d
	 increase page_table size
//////////-end-processing-page-////////

------------------- end alloc_mem() --------------------

------------------- in alloc_mem() --------------------
[alloc_mem] size = 1568, num_pages = 2
[alloc_mem] index in _mem_stat[] = [ 14 15  ]
[alloc_mem] ret_mem = 03c00 
[alloc_mem] update proc->bp = 04400 
////////////-processing-page-//////////
[alloc_mem] Processing page 1th...
[alloc_mem] _mem_stat[index[0] = 14].proc = proc->pid
[alloc_mem] _mem_stat[index[0] = 14].index = ?
[alloc_mem] _mem_stat[index[0] = 14].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 1th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 03c00 + 00000 = 03c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000f
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[10].v_index = 00001
		 page_table of seg_table-0: table[10].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[11].v_index = 00001
		 page_table of seg_table-0: table[11].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[12].v_index = 00001
		 page_table of seg_table-0: table[12].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[13].v_index = 00001
		 page_table of seg_table-0: table[13].p_index = 00000
}
	 page_table of seg_table: trans->table[14].v_index = second_lv = 0000f
	 page_table of seg_table: trans->table[14].p_index = index[i] = 0000e
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 2th...
[alloc_mem] _mem_stat[index[1] = 15].proc = proc->pid
[alloc_mem] _mem_stat[index[1] = 15].index = ?
[alloc_mem] _mem_stat[index[1] = 15].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 2th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 03c00 + 00400 = 04000
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00010
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[10].v_index = 00001
		 page_table of seg_table-0: table[10].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[11].v_index = 00001
		 page_table of seg_table-0: table[11].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[12].v_index = 00001
		 page_table of seg_table-0: table[12].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[13].v_index = 00001
		 page_table of seg_table-0: table[13].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[14].v_index = 00001
		 page_table of seg_table-0: table[14].p_index = 00000
}
	 page_table of seg_table: trans->table[15].v_index = second_lv = 00010
	 page_table of seg_table: trans->table[15].p_index = index[i] = 0000f
	 increase page_table size
//////////-end-processing-page-////////

------------------- end alloc_mem() --------------------

------------------- in alloc_mem() --------------------
[alloc_mem] size = 1386, num_pages = 2
[alloc_mem] index in _mem_stat[] = [ 0 1  ]
[alloc_mem] ret_mem = 04400 
[alloc_mem] update proc->bp = 04c00 
////////////-processing-page-//////////
[alloc_mem] Processing page 1th...
[alloc_mem] _mem_stat[index[0] = 0].proc = proc->pid
[alloc_mem] _mem_stat[index[0] = 0].index = ?
[alloc_mem] _mem_stat[index[0] = 0].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 1th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04400 + 00000 = 04400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00011
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 2
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 2
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
}
	 page_table of seg_table: trans->table[2].v_index = second_lv = 00011
	 page_table of seg_table: trans->table[2].p_index = index[i] = 00000
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 2th...
[alloc_mem] _mem_stat[index[1] = 1].proc = proc->pid
[alloc_mem] _mem_stat[index[1] = 1].index = ?
[alloc_mem] _mem_stat[index[1] = 1].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 2th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04400 + 00400 = 04800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00012
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
}
	 page_table of seg_table: trans->table[3].v_index = second_lv = 00012
	 page_table of seg_table: trans->table[3].p_index = index[i] = 00001
	 increase page_table size
//////////-end-processing-page-////////

------------------- end alloc_mem() --------------------

------------------- in alloc_mem() --------------------
[alloc_mem] size = 4564, num_pages = 5
[alloc_mem] index in _mem_stat[] = [ 2 3 4 5 6  ]
[alloc_mem] ret_mem = 04c00 
[alloc_mem] update proc->bp = 06000 
////////////-processing-page-//////////
[alloc_mem] Processing page 1th...
[alloc_mem] _mem_stat[index[0] = 2].proc = proc->pid
[alloc_mem] _mem_stat[index[0] = 2].index = ?
[alloc_mem] _mem_stat[index[0] = 2].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 1th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04c00 + 00000 = 04c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00013
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[3].v_index = 00010
		 page_table of seg_table-0: table[3].p_index = 0000f
}
	 page_table of seg_table: trans->table[4].v_index = second_lv = 00013
	 page_table of seg_table: trans->table[4].p_index = index[i] = 00002
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 2th...
[alloc_mem] _mem_stat[index[1] = 3].proc = proc->pid
[alloc_mem] _mem_stat[index[1] = 3].index = ?
[alloc_mem] _mem_stat[index[1] = 3].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 2th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04c00 + 00400 = 05000
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00014
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[3].v_index = 00010
		 page_table of seg_table-0: table[3].p_index = 0000f
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[4].v_index = 00010
		 page_table of seg_table-0: table[4].p_index = 0000f
}
	 page_table of seg_table: trans->table[5].v_index = second_lv = 00014
	 page_table of seg_table: trans->table[5].p_index = index[i] = 00003
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 3th...
[alloc_mem] _mem_stat[index[2] = 4].proc = proc->pid
[alloc_mem] _mem_stat[index[2] = 4].index = ?
[alloc_mem] _mem_stat[index[2] = 4].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 3th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04c00 + 00800 = 05400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00015
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[3].v_index = 00010
		 page_table of seg_table-0: table[3].p_index = 0000f
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[4].v_index = 00010
		 page_table of seg_table-0: table[4].p_index = 0000f
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[5].v_index = 00010
		 page_table of seg_table-0: table[5].p_index = 0000f
}
	 page_table of seg_table: trans->table[6].v_index = second_lv = 00015
	 page_table of seg_table: trans->table[6].p_index = index[i] = 00004
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 4th...
[alloc_mem] _mem_stat[index[3] = 5].proc = proc->pid
[alloc_mem] _mem_stat[index[3] = 5].index = ?
[alloc_mem] _mem_stat[index[3] = 5].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 4th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04c00 + 00c00 = 05800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00016
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[3].v_index = 00010
		 page_table of seg_table-0: table[3].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[4].v_index = 00010
		 page_table of seg_table-0: table[4].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[5].v_index = 00010
		 page_table of seg_table-0: table[5].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[6].v_index = 00010
		 page_table of seg_table-0: table[6].p_index = 0000f
}
	 page_table of seg_table: trans->table[7].v_index = second_lv = 00016
	 page_table of seg_table: trans->table[7].p_index = index[i] = 00005
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 5th...
[alloc_mem] _mem_stat[index[4] = 6].proc = proc->pid
[alloc_mem] _mem_stat[index[4] = 6].index = ?
[alloc_mem] _mem_stat[index[4] = 6].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 5th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04c00 + 01000 = 05c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00017
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[3].v_index = 00010
		 page_table of seg_table-0: table[3].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[4].v_index = 00010
		 page_table of seg_table-0: table[4].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[5].v_index = 00010
		 page_table of seg_table-0: table[5].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[6].v_index = 00010
		 page_table of seg_table-0: table[6].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[7].v_index = 00010
		 page_table of seg_table-0: table[7].p_index = 0000f
}
	 page_table of seg_table: trans->table[8].v_index = second_lv = 00017
	 page_table of seg_table: trans->table[8].p_index = index[i] = 00006
	 increase page_table size
//////////-end-processing-page-////////

------------------- end alloc_mem() --------------------
000: 00000-003ff - PID: 01 (idx 000, nxt: 001)
	003e8: 15
001: 00400-007ff - PID: 01 (idx 001, nxt: -01)
002: 00800-00bff - PID: 01 (idx 000, nxt: 003)
003: 00c00-00fff - PID: 01 (idx 001, nxt: 004)
004: 01000-013ff - PID: 01 (idx 002, nxt: 005)
005: 01400-017ff - PID: 01 (idx 003, nxt: 006)
006: 01800-01bff - PID: 01 (idx 004, nxt: -01)
014: 03800-03bff - PID: 01 (idx 000, nxt: 015)
	03814: 66
015: 03c00-03fff - PID: 01 (idx 001, nxt: -01)
NOTE: Read file output/m0 to verify your result
------ MEMORY MANAGEMENT TEST 1 ------------------------------------
./mem input/proc/m1

------------------- in alloc_mem() --------------------
[alloc_mem] size = 13535, num_pages = 14
[alloc_mem] index in _mem_stat[] = [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13  ]
[alloc_mem] ret_mem = 00400 
[alloc_mem] update proc->bp = 03c00 
////////////-processing-page-//////////
[alloc_mem] Processing page 1th...
[alloc_mem] _mem_stat[index[0] = 0].proc = proc->pid
[alloc_mem] _mem_stat[index[0] = 0].index = ?
[alloc_mem] _mem_stat[index[0] = 0].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 1th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 00000 = 00400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00001
[alloc_mem] seg_table_t *pages = {
---> size = 0 (num of page_tables)
---> 
}
---> if page_table of seg_table = NULL
	 seg_table: pages->table[1].v_index = first_lv = 00000
	 seg_table: pages->table[1].pages = trans
	 increase seg_table size
	 page_table of seg_table: trans->table[0].v_index = second_lv = 00001
	 page_table of seg_table: trans->table[0].p_index = index[i] = 00000
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 2th...
[alloc_mem] _mem_stat[index[1] = 1].proc = proc->pid
[alloc_mem] _mem_stat[index[1] = 1].index = ?
[alloc_mem] _mem_stat[index[1] = 1].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 2th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 00400 = 00800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00002
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 1
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
}
	 page_table of seg_table: trans->table[1].v_index = second_lv = 00002
	 page_table of seg_table: trans->table[1].p_index = index[i] = 00001
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 3th...
[alloc_mem] _mem_stat[index[2] = 2].proc = proc->pid
[alloc_mem] _mem_stat[index[2] = 2].index = ?
[alloc_mem] _mem_stat[index[2] = 2].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 3th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 00800 = 00c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00003
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 2
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 2
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
}
	 page_table of seg_table: trans->table[2].v_index = second_lv = 00003
	 page_table of seg_table: trans->table[2].p_index = index[i] = 00002
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 4th...
[alloc_mem] _mem_stat[index[3] = 3].proc = proc->pid
[alloc_mem] _mem_stat[index[3] = 3].index = ?
[alloc_mem] _mem_stat[index[3] = 3].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 4th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 00c00 = 01000
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00004
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
}
	 page_table of seg_table: trans->table[3].v_index = second_lv = 00004
	 page_table of seg_table: trans->table[3].p_index = index[i] = 00003
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 5th...
[alloc_mem] _mem_stat[index[4] = 4].proc = proc->pid
[alloc_mem] _mem_stat[index[4] = 4].index = ?
[alloc_mem] _mem_stat[index[4] = 4].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 5th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 01000 = 01400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00005
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
}
	 page_table of seg_table: trans->table[4].v_index = second_lv = 00005
	 page_table of seg_table: trans->table[4].p_index = index[i] = 00004
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 6th...
[alloc_mem] _mem_stat[index[5] = 5].proc = proc->pid
[alloc_mem] _mem_stat[index[5] = 5].index = ?
[alloc_mem] _mem_stat[index[5] = 5].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 6th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 01400 = 01800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00006
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
}
	 page_table of seg_table: trans->table[5].v_index = second_lv = 00006
	 page_table of seg_table: trans->table[5].p_index = index[i] = 00005
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 7th...
[alloc_mem] _mem_stat[index[6] = 6].proc = proc->pid
[alloc_mem] _mem_stat[index[6] = 6].index = ?
[alloc_mem] _mem_stat[index[6] = 6].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 7th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 01800 = 01c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00007
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
}
	 page_table of seg_table: trans->table[6].v_index = second_lv = 00007
	 page_table of seg_table: trans->table[6].p_index = index[i] = 00006
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 8th...
[alloc_mem] _mem_stat[index[7] = 7].proc = proc->pid
[alloc_mem] _mem_stat[index[7] = 7].index = ?
[alloc_mem] _mem_stat[index[7] = 7].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 8th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 01c00 = 02000
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00008
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
}
	 page_table of seg_table: trans->table[7].v_index = second_lv = 00008
	 page_table of seg_table: trans->table[7].p_index = index[i] = 00007
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 9th...
[alloc_mem] _mem_stat[index[8] = 8].proc = proc->pid
[alloc_mem] _mem_stat[index[8] = 8].index = ?
[alloc_mem] _mem_stat[index[8] = 8].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 9th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 02000 = 02400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00009
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
}
	 page_table of seg_table: trans->table[8].v_index = second_lv = 00009
	 page_table of seg_table: trans->table[8].p_index = index[i] = 00008
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 10th...
[alloc_mem] _mem_stat[index[9] = 9].proc = proc->pid
[alloc_mem] _mem_stat[index[9] = 9].index = ?
[alloc_mem] _mem_stat[index[9] = 9].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 10th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 02400 = 02800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000a
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 9
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
}
	 page_table of seg_table: trans->table[9].v_index = second_lv = 0000a
	 page_table of seg_table: trans->table[9].p_index = index[i] = 00009
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 11th...
[alloc_mem] _mem_stat[index[10] = 10].proc = proc->pid
[alloc_mem] _mem_stat[index[10] = 10].index = ?
[alloc_mem] _mem_stat[index[10] = 10].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 11th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 02800 = 02c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000b
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 10
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
}
	 page_table of seg_table: trans->table[10].v_index = second_lv = 0000b
	 page_table of seg_table: trans->table[10].p_index = index[i] = 0000a
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 12th...
[alloc_mem] _mem_stat[index[11] = 11].proc = proc->pid
[alloc_mem] _mem_stat[index[11] = 11].index = ?
[alloc_mem] _mem_stat[index[11] = 11].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 12th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 02c00 = 03000
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000c
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
		 page_table of seg_table-0: size = 11
		 page_table of seg_table-0: table[10].v_index = 00001
		 page_table of seg_table-0: table[10].p_index = 00000
}
	 page_table of seg_table: trans->table[11].v_index = second_lv = 0000c
	 page_table of seg_table: trans->table[11].p_index = index[i] = 0000b
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 13th...
[alloc_mem] _mem_stat[index[12] = 12].proc = proc->pid
[alloc_mem] _mem_stat[index[12] = 12].index = ?
[alloc_mem] _mem_stat[index[12] = 12].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 13th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 03000 = 03400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000d
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[10].v_index = 00001
		 page_table of seg_table-0: table[10].p_index = 00000
		 page_table of seg_table-0: size = 12
		 page_table of seg_table-0: table[11].v_index = 00001
		 page_table of seg_table-0: table[11].p_index = 00000
}
	 page_table of seg_table: trans->table[12].v_index = second_lv = 0000d
	 page_table of seg_table: trans->table[12].p_index = index[i] = 0000c
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 14th...
[alloc_mem] _mem_stat[index[13] = 13].proc = proc->pid
[alloc_mem] _mem_stat[index[13] = 13].index = ?
[alloc_mem] _mem_stat[index[13] = 13].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 14th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 00400 + 03400 = 03800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000e
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[10].v_index = 00001
		 page_table of seg_table-0: table[10].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[11].v_index = 00001
		 page_table of seg_table-0: table[11].p_index = 00000
		 page_table of seg_table-0: size = 13
		 page_table of seg_table-0: table[12].v_index = 00001
		 page_table of seg_table-0: table[12].p_index = 00000
}
	 page_table of seg_table: trans->table[13].v_index = second_lv = 0000e
	 page_table of seg_table: trans->table[13].p_index = index[i] = 0000d
	 increase page_table size
//////////-end-processing-page-////////

------------------- end alloc_mem() --------------------

------------------- in alloc_mem() --------------------
[alloc_mem] size = 1568, num_pages = 2
[alloc_mem] index in _mem_stat[] = [ 14 15  ]
[alloc_mem] ret_mem = 03c00 
[alloc_mem] update proc->bp = 04400 
////////////-processing-page-//////////
[alloc_mem] Processing page 1th...
[alloc_mem] _mem_stat[index[0] = 14].proc = proc->pid
[alloc_mem] _mem_stat[index[0] = 14].index = ?
[alloc_mem] _mem_stat[index[0] = 14].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 1th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 03c00 + 00000 = 03c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 0000f
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[10].v_index = 00001
		 page_table of seg_table-0: table[10].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[11].v_index = 00001
		 page_table of seg_table-0: table[11].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[12].v_index = 00001
		 page_table of seg_table-0: table[12].p_index = 00000
		 page_table of seg_table-0: size = 14
		 page_table of seg_table-0: table[13].v_index = 00001
		 page_table of seg_table-0: table[13].p_index = 00000
}
	 page_table of seg_table: trans->table[14].v_index = second_lv = 0000f
	 page_table of seg_table: trans->table[14].p_index = index[i] = 0000e
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 2th...
[alloc_mem] _mem_stat[index[1] = 15].proc = proc->pid
[alloc_mem] _mem_stat[index[1] = 15].index = ?
[alloc_mem] _mem_stat[index[1] = 15].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 2th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 03c00 + 00400 = 04000
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00010
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[0].v_index = 00001
		 page_table of seg_table-0: table[0].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[1].v_index = 00001
		 page_table of seg_table-0: table[1].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[2].v_index = 00001
		 page_table of seg_table-0: table[2].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[3].v_index = 00001
		 page_table of seg_table-0: table[3].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[4].v_index = 00001
		 page_table of seg_table-0: table[4].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[5].v_index = 00001
		 page_table of seg_table-0: table[5].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[6].v_index = 00001
		 page_table of seg_table-0: table[6].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[7].v_index = 00001
		 page_table of seg_table-0: table[7].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[8].v_index = 00001
		 page_table of seg_table-0: table[8].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[9].v_index = 00001
		 page_table of seg_table-0: table[9].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[10].v_index = 00001
		 page_table of seg_table-0: table[10].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[11].v_index = 00001
		 page_table of seg_table-0: table[11].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[12].v_index = 00001
		 page_table of seg_table-0: table[12].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[13].v_index = 00001
		 page_table of seg_table-0: table[13].p_index = 00000
		 page_table of seg_table-0: size = 15
		 page_table of seg_table-0: table[14].v_index = 00001
		 page_table of seg_table-0: table[14].p_index = 00000
}
	 page_table of seg_table: trans->table[15].v_index = second_lv = 00010
	 page_table of seg_table: trans->table[15].p_index = index[i] = 0000f
	 increase page_table size
//////////-end-processing-page-////////

------------------- end alloc_mem() --------------------

------------------- in alloc_mem() --------------------
[alloc_mem] size = 1386, num_pages = 2
[alloc_mem] index in _mem_stat[] = [ 0 1  ]
[alloc_mem] ret_mem = 04400 
[alloc_mem] update proc->bp = 04c00 
////////////-processing-page-//////////
[alloc_mem] Processing page 1th...
[alloc_mem] _mem_stat[index[0] = 0].proc = proc->pid
[alloc_mem] _mem_stat[index[0] = 0].index = ?
[alloc_mem] _mem_stat[index[0] = 0].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 1th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04400 + 00000 = 04400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00011
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 2
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 2
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
}
	 page_table of seg_table: trans->table[2].v_index = second_lv = 00011
	 page_table of seg_table: trans->table[2].p_index = index[i] = 00000
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 2th...
[alloc_mem] _mem_stat[index[1] = 1].proc = proc->pid
[alloc_mem] _mem_stat[index[1] = 1].index = ?
[alloc_mem] _mem_stat[index[1] = 1].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 2th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04400 + 00400 = 04800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00012
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 3
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
}
	 page_table of seg_table: trans->table[3].v_index = second_lv = 00012
	 page_table of seg_table: trans->table[3].p_index = index[i] = 00001
	 increase page_table size
//////////-end-processing-page-////////

------------------- end alloc_mem() --------------------

------------------- in alloc_mem() --------------------
[alloc_mem] size = 4564, num_pages = 5
[alloc_mem] index in _mem_stat[] = [ 2 3 4 5 6  ]
[alloc_mem] ret_mem = 04c00 
[alloc_mem] update proc->bp = 06000 
////////////-processing-page-//////////
[alloc_mem] Processing page 1th...
[alloc_mem] _mem_stat[index[0] = 2].proc = proc->pid
[alloc_mem] _mem_stat[index[0] = 2].index = ?
[alloc_mem] _mem_stat[index[0] = 2].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 1th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04c00 + 00000 = 04c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00013
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
		 page_table of seg_table-0: size = 4
		 page_table of seg_table-0: table[3].v_index = 00010
		 page_table of seg_table-0: table[3].p_index = 0000f
}
	 page_table of seg_table: trans->table[4].v_index = second_lv = 00013
	 page_table of seg_table: trans->table[4].p_index = index[i] = 00002
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 2th...
[alloc_mem] _mem_stat[index[1] = 3].proc = proc->pid
[alloc_mem] _mem_stat[index[1] = 3].index = ?
[alloc_mem] _mem_stat[index[1] = 3].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 2th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04c00 + 00400 = 05000
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00014
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[3].v_index = 00010
		 page_table of seg_table-0: table[3].p_index = 0000f
		 page_table of seg_table-0: size = 5
		 page_table of seg_table-0: table[4].v_index = 00010
		 page_table of seg_table-0: table[4].p_index = 0000f
}
	 page_table of seg_table: trans->table[5].v_index = second_lv = 00014
	 page_table of seg_table: trans->table[5].p_index = index[i] = 00003
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 3th...
[alloc_mem] _mem_stat[index[2] = 4].proc = proc->pid
[alloc_mem] _mem_stat[index[2] = 4].index = ?
[alloc_mem] _mem_stat[index[2] = 4].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 3th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04c00 + 00800 = 05400
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00015
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[3].v_index = 00010
		 page_table of seg_table-0: table[3].p_index = 0000f
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[4].v_index = 00010
		 page_table of seg_table-0: table[4].p_index = 0000f
		 page_table of seg_table-0: size = 6
		 page_table of seg_table-0: table[5].v_index = 00010
		 page_table of seg_table-0: table[5].p_index = 0000f
}
	 page_table of seg_table: trans->table[6].v_index = second_lv = 00015
	 page_table of seg_table: trans->table[6].p_index = index[i] = 00004
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 4th...
[alloc_mem] _mem_stat[index[3] = 5].proc = proc->pid
[alloc_mem] _mem_stat[index[3] = 5].index = ?
[alloc_mem] _mem_stat[index[3] = 5].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 4th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04c00 + 00c00 = 05800
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00016
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[3].v_index = 00010
		 page_table of seg_table-0: table[3].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[4].v_index = 00010
		 page_table of seg_table-0: table[4].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[5].v_index = 00010
		 page_table of seg_table-0: table[5].p_index = 0000f
		 page_table of seg_table-0: size = 7
		 page_table of seg_table-0: table[6].v_index = 00010
		 page_table of seg_table-0: table[6].p_index = 0000f
}
	 page_table of seg_table: trans->table[7].v_index = second_lv = 00016
	 page_table of seg_table: trans->table[7].p_index = index[i] = 00005
	 increase page_table size
//////////-end-processing-page-////////

////////////-processing-page-//////////
[alloc_mem] Processing page 5th...
[alloc_mem] _mem_stat[index[4] = 6].proc = proc->pid
[alloc_mem] _mem_stat[index[4] = 6].index = ?
[alloc_mem] _mem_stat[index[4] = 6].next = index[i + 1] or -1?
[alloc_mem] Updating page_table of 5th-page...
[alloc_mem] addr = ret_mem + (i << OFFSET_LEN) <-> 04c00 + 01000 = 05c00
[alloc_mem] first_lv = get_first_lv(addr) = addr >> (OFFSET_LEN + PAGE_LEN) <-> 00000
[alloc_mem] second_lv = get_second_lv(addr) = (addr >> OFFSET_LEN) - (get_first_lv(addr) << PAGE_LEN) <-> 00017
[alloc_mem] seg_table_t *pages = {
---> size = 1 (num of page_tables)
---> 
	 seg_table: pages.table[0].v_index = 00000
	 seg_table: pages.table[0].pages = tro page_table_t tuong ung
	                         = get_page_table(first_lv, pages)
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[0].v_index = 00010
		 page_table of seg_table-0: table[0].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[1].v_index = 00010
		 page_table of seg_table-0: table[1].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[2].v_index = 00010
		 page_table of seg_table-0: table[2].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[3].v_index = 00010
		 page_table of seg_table-0: table[3].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[4].v_index = 00010
		 page_table of seg_table-0: table[4].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[5].v_index = 00010
		 page_table of seg_table-0: table[5].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[6].v_index = 00010
		 page_table of seg_table-0: table[6].p_index = 0000f
		 page_table of seg_table-0: size = 8
		 page_table of seg_table-0: table[7].v_index = 00010
		 page_table of seg_table-0: table[7].p_index = 0000f
}
	 page_table of seg_table: trans->table[8].v_index = second_lv = 00017
	 page_table of seg_table: trans->table[8].p_index = index[i] = 00006
	 increase page_table size
//////////-end-processing-page-////////

------------------- end alloc_mem() --------------------
NOTE: Read file output/m1 to verify your result (your implementation should print nothing)
